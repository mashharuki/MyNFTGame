{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/Arena/index.js","Components/SelectCharacter/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","TWITTER_HANDLE","TWITTER_LINK","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","Arena","characterNFT","setCharacterNFT","useState","gameContract","setGameContract","boss","setBoss","attackState","setAttackState","showToast","setShowToast","hpZeroFlg","setHpZeroFlg","characters","setCharacters","useEffect","ethereum","window","fetchNFTs","contract","getAllPlayers","console","log","nfts","map","nft","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","fetchBoss","getBisBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","on","off","runAttackAction","attackBoss","attackTxn","wait","setTimeout","error","id","src","alt","value","max","onClick","SelectCharacter","mintingCharacter","setMintingCharacter","getCharacters","getAllDefaultCharacters","charactersTxn","nftCharacters","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","alert","address","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","warn","length","character","index","type","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkNetwork","networkVersion","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02bd20cc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","// アプリで使用する定数を定義したファイル\n\nconst CONTRACT_ADDRESS = \"0xE7DBA0216b58d82C414CaC4fE31B2c22e96fd694\";\nconst TWITTER_HANDLE = 'HARUKI05758694';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// NFTデータをフロントエンド側でも扱える様なオブジェクトに変換する。\nconst transformCharacterData = (characterData) => {\n    return {\n      name: characterData.name,\n      imageURI: characterData.imageURI,\n      hp: characterData.hp.toNumber(),\n      maxHp: characterData.maxHp.toNumber(),\n      attackDamage: characterData.attackDamage.toNumber(),\n    };\n  };\n\nexport { CONTRACT_ADDRESS, TWITTER_LINK, TWITTER_HANDLE, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../artifacts/contracts/MyEpicGame.sol/MyEpicGame.json\";\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\n/**\n * Arenaコンポーネント\n * @param {*} param0 NFTのメタデータ\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // ステート変数\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false);\n  const [hpZeroFlg, setHpZeroFlg] = useState(false);\n  const [characters, setCharacters] = useState([]);\n  const [mintFlg, setMintFlg] = useState(false);\n\n  // 副作用フック\n  useEffect(() => {\n    const { ethereum } = window;\n\n    // 発行済みNFTデータを取得するメソッド\n    const fetchNFTs =  async (contract) => {\n      const fetchNFTs = await contract.getAllPlayers();\n      console.log(\"NFTs:\", fetchNFTs);\n      // フロントエンド側で扱いやすい様にデータを加工して配列に詰める。\n      const nfts = fetchNFTs.map((nft) =>\n        transformCharacterData(nft)\n      );\n      // ステート変数更新\n      setCharacters(nfts);\n    }\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      setGameContract(contract);\n      // 全ての発行済みキャラクターNFTを取得する。\n      fetchNFTs(contract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  // 副作用フック\n  useEffect(() => {\n    // ボスのデータを取得する。\n    const fetchBoss = async () => {\n        const bossTxn = await gameContract.getBisBoss();\n        console.log(\"Boss:\", bossTxn);\n        setBoss(transformCharacterData(bossTxn));\n    };\n\n    // イベントリスナーを受信した時のコールバック関数\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n        // ボスとプレイヤーの更新後のHPを取得する。\n        const bossHp = newBossHp.toNumber();\n        const playerHp = newPlayerHp.toNumber();\n        console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n    \n        // NFT キャラクターとボスのHPを更新します。\n        setBoss((prevState) => {\n          return { ...prevState, hp: bossHp };\n        });\n        setCharacterNFT((prevState) => {\n          return { ...prevState, hp: playerHp };\n        });\n        // HPが0になった時にフラグを有効化する。\n        if (playerHp <= 0) {\n          setHpZeroFlg(true);\n        }\n    };\n\n    if (gameContract) {\n        fetchBoss();\n        // イベントリスナー設定\n        gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n    return () => {\n        if (gameContract) {\n            // リスナー終了\n            gameContract.off(\"AttackComplete\", onAttackComplete);\n        }\n    };\n  }, [gameContract]);\n\n  /**\n   * 攻撃アクションを実行するためのメソッド\n   */\n  const runAttackAction = async () => {\n    try {\n        if (gameContract) {\n            // attackState の状態を attacking に設定する。\n            setAttackState(\"attacking\");\n            console.log(\"Attacking boss...\");\n            // attackBossメソッドを呼び出す。\n            const attackTxn = await gameContract.attackBoss();\n            await attackTxn.wait();\n            console.log(\"attackTxn:\", attackTxn);\n      \n            // attackState の状態を hit に設定する。\n            setAttackState(\"hit\");\n\n            setShowToast(true);\n            // 5秒後に非表示にする。\n            setTimeout(() => {\n              setShowToast(false);\n            }, 5000);\n          }\n    } catch (error) {\n        console.error(\"Error attacking boss:\", error);\n        setAttackState(\"\");\n    }\n  };\n\n  /**\n   * HPが0になった時に処理されるコンポーネント\n   */\n  const renderButton = () => {\n    return (\n      <button className=\"mint-button\" onClick={setMintFlg(true)}>\n          新しいキャラクターNFTを発行する\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"arena-container\">\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {boss && (\n        <div className=\"boss-container\">\n            <div className={`boss-content ${attackState}`}>\n              <h2>🔥 {boss.name} 🔥</h2>\n              <div className=\"image-content\">\n                  <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n                  <div className=\"health-bar\">\n                    <progress value={boss.hp} max={boss.maxHp} />\n                    <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n                  </div>\n              </div>\n            </div>\n            <div className=\"attack-container\">\n              <button className=\"cta-button\" onClick={runAttackAction}>\n                  {`💥 Attack ${boss.name}`}\n              </button>\n            </div>\n            {attackState === \"attacking\" && (\n              <div className=\"loading-indicator\">\n                <LoadingIndicator />\n                <p>Attacking ⚔️</p>\n              </div>\n            )}\n        </div>\n        )}\n        {hpZeroFlg && (\n          <div id=\"toast\" className={showToast ? \"zero-show\" : \"\"}>\n            <div id=\"desc\">You lose....</div>\n          </div>\n        )}\n        {characters && (\n            <div className=\"players-container\">\n              <div className=\"player-container\">\n                <h2>Your Character Team</h2>\n                <div className=\"player\">\n                  <div className=\"image-content\">\n                    <h2>{characterNFT.name}</h2>\n                    <img\n                        src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                    />\n                    <div className=\"health-bar\">\n                        <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                        <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                    </div>\n                  </div>\n                  <div className=\"stats\">\n                    <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n                  </div>\n                </div>\n              </div>\n            </div>\n        )}\n    </div>\n  );\n};\n\nexport default Arena;","import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../artifacts/contracts/MyEpicGame.sol/MyEpicGame.json\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\n/**\n * SelectCharacterコンポーネント\n * @param {*} param0 \n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n    const [mintingCharacter, setMintingCharacter] = useState(false);\n\n    /**\n     * 副作用フック\n     */\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contract = new ethers.Contract(\n            CONTRACT_ADDRESS,\n            myEpicGame.abi,\n            signer\n          );\n          // コントラクトの情報をセットする。\n          setGameContract(contract); \n        } else {\n            console.log(\"Ethereum object not found\");\n        }\n    }, []);\n\n    /**\n     * コントラクトの情報が更新されたらキャラクターNFTのデータを読み込む\n     */\n    useEffect(() => {\n        // キャラクターNFTを取得するメソッド\n        const getCharacters = async () => {\n            try {\n              console.log(\"Getting contract characters to mint\");\n              // ミント可能な全NFTキャラクターを取得する。\n              const charactersTxn = await gameContract.getAllDefaultCharacters();\n              console.log(\"charactersTxn:\", charactersTxn);\n        \n              // フロントエンド側で扱いやすいオブジェクトに変換する。\n              const nftCharacters = charactersTxn.map((characterData) =>\n                transformCharacterData(characterData)\n              );\n        \n              // console.log(\"chracters:\", nftCharacters);\n              // ミント可能なすべてのNFTキャラクターの状態を設定します。\n              setCharacters(nftCharacters);\n            } catch (error) {\n              console.error(\"Something went wrong fetching characters:\", error);\n            }\n          };\n\n          // イベントをキャッチした時に実行する。\n          const onCharacterMint = async (sender, tokenId, characterIndex) => {\n            console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`);\n            \n            if (gameContract) {\n                // NFTする。\n                const characterNFT = await gameContract.checkIfUserHasNFT();\n                console.log(\"CharacterNFT: \", characterNFT);\n                // データ構造を変換する。\n                setCharacterNFT(transformCharacterData(characterNFT));\n                alert(\n                    `NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${\n                        gameContract.address\n                    }:${tokenId.toNumber()}?tab=details`\n                );\n            }\n          };\n\n          // コントラクトがセットされている場合のみ実行\n          if (gameContract) {\n            getCharacters();\n            // リスナーの設定\n            gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n          }\n          return () => {\n            // コンポーネントがマウントされたら、リスナーを停止する。\n            if (gameContract) {\n              gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n            }\n          };\n    }, [gameContract]);\n\n    // キャラクターNFTのデータを表示するメソッド\n    const renderChracters = () => \n        characters.map((character, index) => (\n            <div className=\"character-item\" key={character.name}>\n              <div className=\"name-container\">\n                <p>{character.name}</p>\n              </div>\n              <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} />\n              <button\n                type=\"button\"\n                className=\"character-mint-button\"\n                onClick={mintCharacterNFTAction(index)}\n              >{`Mint ${character.name}`}</button>\n            </div>\n        ));\n     \n\n    // キャラクターNFTを発行するためのメソッド\n    const mintCharacterNFTAction = (characterId) => async () => {\n        try {\n          if (gameContract) {\n            setMintingCharacter(true);\n            console.log(\"Minting character in progress...\");\n            // mintCharacterNFTメソッドを呼び出す。\n            const mintTxn = await gameContract.mintCharacterNFT(characterId);\n            await mintTxn.wait();\n            console.log(\"mintTxn:\", mintTxn);\n            setMintingCharacter(false);\n          }\n        } catch (error) {\n          console.warn(\"MintCharacterAction Error:\", error);\n          setMintingCharacter(false);\n        }\n    };\n\n    return (\n        <div className=\"select-character-container\">\n            <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n            {characters.length > 0 && (\n                <div className=\"character-grid\">\n                    {renderChracters()}\n                </div>\n            )}\n            {mintingCharacter && (\n              <div className=\"loading\">\n                <div className=\"indicator\">\n                  <LoadingIndicator />\n                  <p>Minting In Progress...</p>\n                </div>\n              </div>\n            )}\n        </div>\n    );\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport Arena from \"./Components/Arena\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport myEpicGame from \"./artifacts/contracts/MyEpicGame.sol/MyEpicGame.json\";\nimport { \n  CONTRACT_ADDRESS, \n  TWITTER_HANDLE, \n  TWITTER_LINK, \n  transformCharacterData \n} from \"./constants\";\nimport { ethers } from \"ethers\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\n\n/**\n * Appコンポーネント\n */\nconst App = () => {\n  // ステート変数\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // check network DI\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // check user have metamask\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    try {\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        setIsLoading(false);\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n        // MetaMaskのアカウント情報を取得する。\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n          \n          if (accounts.length !== 0) {\n            const account = accounts[0];\n            console.log(\"Found an authorized account:\", account);\n            // ステート変数を格納する。\n            setCurrentAccount(account);\n          } else {\n            console.log(\"No authorized account found\");\n          }\n      }\n    } catch(error) {\n      console.error(error);\n    }\n    setIsLoading(false);\n  };\n\n  /**\n   * Connect Walletボタン\n   */\n   const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Please download MetaMask!\");\n        return;\n      }\n      checkIfWalletIsConnected();\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({method: \"eth_requestAccounts\",});\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * ログイン状態によってConnect Walletボタンを表示を切り替えるメソッド\n   */\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    // ウォレットのログイン状態を確認する。\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img src=\"https://i.imgur.com/yMocj5x.png\" alt=\"Pikachu\" />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet to Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  // NFTのデータを取得する副作用フック\n  useEffect(() => {\n    const fetchNFTMetadata = async() => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n      // コントラクト機能を使うための準備\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      // checkIfUserHasNFTメソッドを呼び出す。\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n      // ローディング状態をfalseにする。\n      setIsLoading(false);\n    };\n    // アカウントが接続されている時のみNFTデータを取得する。\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n        <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n          <p className=\"sub-text\">複数のキャラクターを駆使してボスを倒そう✨</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}